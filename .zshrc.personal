function evc() {
  # The /dev/null usage just makes sure we're silently updating our pwd stack
  pushd $HOME/.config/nvim > /dev/null
  nvim .
  popd > /dev/null
}

function etx() {
  nvim ~/.config/tmux/tmux.conf
  tmux source-file ~/.config/tmux/tmux.conf
  echo "Reloaded tmux.conf"
}

function erc() {
  nvim ~/.zshrc.personal
  source ~/.zshrc.personal
  echo "Reloaded zshrc.personal"
}

function etw() {
  nvim ~/.config/task/taskrc
}

# Adds to path only if it's not already there.
function add_path() {
  [[ -d "$1" && ":$PATH:" != *":$1:"* ]] && export PATH="$1:$PATH" && echo "Added $1 to path"
}
add_path "$HOME/go/bin"
add_path "$HOME/.local/share/fnm"

# And just in case:
function remove_from_path() {
  PATH=":${PATH}:"
  PATH="${PATH//:$1:/:}"  # Remove the target directory
  PATH="${PATH#:}"         # Remove leading colon, if any
  PATH="${PATH%:}"         # Remove trailing colon, if any
}

# Load up fnm (node) as needed
if [[ ! -z "$FNM_DIR" ]]; then
  eval "$(fnm env)"
fi

alias vim='nvim'
export EDITOR='nvim'

# Set up custom keybindings
# autoload -Uz zle
# # Custom keybindings for Vim-like movements
bindkey '^k' up-line-or-history     # Ctrl-k to move up in history
bindkey '^j' down-line-or-history   # Ctrl-j to move down in history
bindkey '^h' backward-word
bindkey '^l' forward-word


# # Display the clock time on the left
# PROMPT='%F{5}[%D{%H:%M:%S}]%f %F{116}%(?:%1{ %} :%1{X%} )%c%f $(git_prompt_info)'
# #
# # Initialize variables for timing
# typeset -g _aaron_start_time _aaron_real_time
# # Record the start time before each command
# preexec() {
#   _aaron_start_time=$EPOCHREALTIME
# }
# # Calculate and display the command execution time on the right
# precmd() {
#   RPROMPT=
#   if [[ -n $_aaron_start_time ]]; then
#     _aaron_real_time=$EPOCHREALTIME
#     elapsed_time=$(printf "%.2f" "$(($_aaron_real_time - _aaron_start_time))")
#     RPROMPT="%F{4}${elapsed_time}s%f"
#     unset _aaron_start_time
#   fi
# }

# Left-side prompt showing current time and directory
PROMPT='%F{5}[%D{%H:%M:%S}]%f %F{116}%c%f $(git_prompt_info)'

# Initialize variables for timing
typeset -g _aaron_start_time _aaron_real_time

# Track the start time of each command
preexec() {
  _aaron_start_time=$EPOCHREALTIME
}

# Calculate elapsed time and set RPROMPT with a success/failure indicator
precmd() {
  # have to cache exit status even before resetting RPROMPT
  local exit_status=$?
  RPROMPT=""

  if [[ -n $_aaron_start_time ]]; then
    _aaron_real_time=$EPOCHREALTIME
    elapsed_time=$(printf "%.2f" "$(($_aaron_real_time - _aaron_start_time))")
    
    # Show the time of the previous command
    RPROMPT="%F{4}${elapsed_time}s%f"
    # Show the exit status of the previous command
    if [[ $exit_status -eq 0 ]]; then
      RPROMPT="$RPROMPT %F{2}âœ“%f"
    else
      RPROMPT="$RPROMPT %F{1}X%f"
    fi
    
    # Clear start time after calculating elapsed time
    unset _aaron_start_time
  fi
}

